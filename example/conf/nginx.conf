daemon off;
worker_processes    4;

events {
    worker_connections  1024;
    accept_mutex_delay  100ms;
}


http {
    sendfile            on;
    tcp_nopush          on;
    keepalive_timeout   1;
    keepalive_requests  500000;
    #gzip               on;
    open_file_cache     max=100;
    include             mime.types;
    default_type        text/html;
    index               index.htm;
    
    #
    # log settings
    #
    access_log  off;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    
    
    # 
    # lua global settings
    #
    lua_check_client_abort  on;
    lua_code_cache          on;
    lua_shared_dict         test 1m;
    
    #
    # initialize script
    #
    init_by_lua "
        Cache = require('cache.resty.dict');
        Cache = assert( Cache.new( nil, 'test' ) );
    ";
    
    server {
        listen      1080;
        root        html;
        
        #
        # content handler: html
        #
        location ~* \.(html|htm)$ {
            content_by_lua "
                local inspect = require('util').inspect;
                local key = 'test key';
                local val, err = Cache:get( key );
                local newval = {
                    pid = ngx.worker.pid(),
                    now = ngx.now()
                };
                local ok, res;
                
                if err then
                    ngx.say( err );
                    return ngx.HTTP_INTERNAL_SERVER_ERROR;
                end
                
                -- set new val
                ok, err = Cache:set( key, newval, 10 );
                if err then
                    ngx.say( err );
                    return ngx.HTTP_INTERNAL_SERVER_ERROR;
                end
                
                ngx.say( '<pre>' .. table.concat({
                    'pid: ' .. ngx.worker.pid(),
                    'val: ' .. inspect( val ),
                    'set: ' .. inspect( newval )
                }, '\\n' ) .. '</pre>' );
            ";
        }
    }
}


